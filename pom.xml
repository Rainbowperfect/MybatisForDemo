<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.person</groupId>
  <artifactId>mybatis01</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>


    <name>mybatis01</name>
  <url>http://www.example.com</url>

  <dependencies>

    <!--mybatis-->
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.2.8</version>
    </dependency>
    <!--mysql-->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.32</version>
    </dependency>
    <!--日志-->
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>2.0.2</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.7.5</version>
    </dependency>

    <!--单元测试-->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.10</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!--资源文件拷贝插件-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>
<!--java编译插件-->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.7.0</version>
        <configuration>
        <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
    </plugins>

    <resources>
      <!--使用maven部署的时候，xml和properties配置文件也一起部署到tomcat-->
      <resource>
        <directory>src/main/java</directory>

        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
        <filtering>false</filtering>
      </resource>
      <resource>
          <directory>src/main/resources</directory>
          <includes>
            <include>**/*.properties</include>
            <include>**/*.xml</include>
          </includes>
          <filtering>false</filtering>
        </resource>
    </resources>
  </build>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
  </properties>


</project>



<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.huawei.dfx.noticemessageservice.dao.mapper.NoticeMessageMapper">


	<resultMap id="NoticeMessageResultMap"
		type="com.huawei.dfx.noticemessageservice.model.NoticeMessage">
		<id property="msgId" column="MSGID" />
		<result property="content" column="CONTENT" />
		<result property="params" column="PARAMS" />
		<result property="owner" column="OWNER" />
		<result property="createTime" column="CREATE_TIME" />	
		<result property="source" column="SOURCE" />	
		<result property="status" column="STATUS" />
	</resultMap> 
	
		
   	 
   	 <select id="getNoticeMessageCount" parameterType="com.huawei.dfx.noticemessageservice.model.NoticeMessage" resultType="int">
		SELECT
		<![CDATA[
			count(MSGID)
		]]> 
		FROM t_message t
		WHERE 1=1
		<include refid="queryCondition"/>
    </select>
    
    <select id="getMessageListByMessage" parameterType="com.huawei.dfx.noticemessageservice.model.NoticeMessage" resultMap="NoticeMessageResultMap" >
		<include refid="selectTemplate"/>
		WHERE 1=1
		<include refid="queryCondition"/>
		ORDER BY t.CREATE_TIME DESC
		limit #{offset},#{limit}
	</select>
   	 
   	 
   	 <sql id="selectTemplate">
	   SELECT 
	   		t.MSGID,
	   		t.CONTENT,
	   		t.PARAMS,
	   		t.OWNER,
		    DATE_FORMAT(t.CREATE_TIME, '%Y-%m-%d %H:%i:%s') AS createTime,
	   		t.SOURCE,
	   		t.STATUS
		FROM  t_message t
	</sql> 
	
	<sql id="queryCondition">
		 <if test="noticeMessage.msgId != null and noticeMessage.msgId != ''"> 
		   	 AND t.MSGID = #{noticeMessage.msgId, jdbcType=VARCHAR}
		 </if>
		 <if test="noticeMessage.owner != null and noticeMessage.owner != ''"> 
		   	 AND (INSTR(Upper(t.OWNER),Upper(#{noticeMessage.owner})) > 0 )	 
		 </if>
		 <if test="noticeMessage.source != null and noticeMessage.source != ''"> 
		   	 AND t.SOURCE = #{noticeMessage.source, jdbcType=VARCHAR}
		 </if>
		 <if test="noticeMessage.status != null and noticeMessage.status != ''"> 
		   	 AND t.STATUS = #{noticeMessage.status, jdbcType=VARCHAR}
		 </if>
		 <if test="noticeMessage.keywords != null and noticeMessage.keywords != ''"> 
		   	 AND (INSTR(Upper(t.CONTENT),Upper(#{noticeMessage.keywords})) > 0 OR INSTR(Upper(t.PARAMS),Upper(#{noticeMessage.keywords})) > 0)
		 </if>
		 <if test="noticeMessage.paramsQueryKey != null and noticeMessage.paramsQueryKey != '' and noticeMessage.paramsQueryValue != null and noticeMessage.paramsQueryValue != ''"> 
		 	<![CDATA[
		   		AND  t.params -> #{noticeMessage.paramsQueryKey} = #{noticeMessage.paramsQueryValue}
			]]> 
		 </if>
		 
	</sql>
	
	<insert id="addNoticeMessage" parameterType="com.huawei.dfx.noticemessageservice.model.NoticeMessage">
		INSERT INTO
		t_message 
		(
		MSGID,
		CONTENT,
		PARAMS,
		OWNER,
		CREATE_TIME,
		SOURCE,
		STATUS
		)
		VALUES
		(
		#{msgId},
		#{content},
		#{params},
		#{owner},
		now(),
		#{source},
		#{status}
		)
	</insert>

	<update id="modifyNoticeMessage" parameterType="com.huawei.dfx.noticemessageservice.model.NoticeMessage">
		UPDATE t_message
		<trim prefix="set" suffixOverrides=",">
			<if test="content != null and content != ''">
				CONTENT = #{content},
			</if>
			<if test="params != null and params != ''">
				PARAMS = #{params},
			</if>
			<if test="owner != null and owner != ''">
				OWNER = #{owner},
			</if>
			<if test="createTime != null and createTime != ''">
				CREATE_TIME = #{createTime},
			</if>
			<if test="source != null and source != ''">
				SOURCE = #{source},
			</if>
			<if test="status != null and status != ''">
				STATUS = #{status},
			</if>
		</trim>
		WHERE MSGID = #{msgId}
	</update>
	
	<update id="modifyNoticeMessageByuser" parameterType="com.huawei.dfx.noticemessageservice.model.NoticeMessage">
		UPDATE t_message
		<trim prefix="set" suffixOverrides=",">
			<if test="status != null and status != ''">
				STATUS = #{status},
			</if>
		</trim>
		WHERE OWNER = #{owner}
	</update>
</mapper>





package com.huawei.dfx.projectwebsite.template.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.core.MediaType;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.huawei.dfx.cbb.entitle.user.UserConversionUtil;
import com.huawei.dfx.cbb.web.controller.BaseController;
import com.huawei.dfx.cbb.web.entity.BaseResponseMsg;
import com.huawei.dfx.noticemessageservice.model.NoticeMessage;
import com.huawei.dfx.noticemessageservice.service.NoticeMessageService;
import com.huawei.support.cbb.util.security.CodeCCUtils;
import com.huawei.support.contentstorageservice.common.util.json.JSONUtil;

@Controller
@RequestMapping("/message")
public class MessageQueryController extends BaseController
{
	//日志操作
	 public static final Logger LOG = LoggerFactory.getLogger(MessageQueryController.class);
	 
	 @Autowired
	 private NoticeMessageService noticeMessageService;
	 
	 private Map<String, String> userMap = new HashMap<String, String>();
	 
	 /**
	 * 模糊消息查詢
	 * @param request
	 * @param noticeMessage
	 * @return
	 */
	 @RequestMapping(value = "/query/list/page", produces = MediaType.APPLICATION_JSON, method = RequestMethod.POST)
	 @ResponseBody
	public BaseResponseMsg queryMessage(HttpServletRequest request , @RequestBody NoticeMessage noticeMessage, String offset, String limit)
	{
		Map<String, Object> noticeMessageMap = new HashMap<String, Object>();
		try
		{
			List<NoticeMessage> noticeMessages = new ArrayList<NoticeMessage>();
			Integer messageCount = noticeMessageService.getNoticeMessageCount(noticeMessage);
			if (messageCount > 0) 
			{
				noticeMessages = noticeMessageService.getMessageListByMessage(noticeMessage, Integer.valueOf(offset),
						Integer.valueOf(limit));
			}
			getMessageInfos(noticeMessages);
			noticeMessageMap.put("count", messageCount);
			noticeMessageMap.put("noticeMessages", noticeMessages);
			return buildResponse(Boolean.TRUE, noticeMessageMap);
		} catch (Exception e) {

			CodeCCUtils.errorLog(LOG, "请确认您要查詢的內容:", e);
			return buildResponse(Boolean.FALSE, e);
		}
	}
	 
	@SuppressWarnings({ "unchecked" })
	private void getMessageInfos(List<NoticeMessage> msgList) throws Exception 
	{
		for (NoticeMessage noticemsg : msgList)
		{
			String content = noticemsg.getContent();
			Map<String, String> map = JSONUtil.stringToBean(noticemsg.getParams(), Map.class);
			if (null == map || MapUtils.isEmpty(map))
			{
				continue;
			}
			String[] contents = StringUtils.split(content, "${");
			for (String param : contents) {
				String key = StringUtils.substring(param, 0, StringUtils.lastIndexOf(param, "}"));
				if (StringUtils.isNotBlank(key) && map.containsKey(key))
				{
					String value = map.get(key);
					if (StringUtils.isBlank(value))
					{
						continue;
					}
					value = getUserValue(value);
					content = StringUtils.replace(content, "${" + key + "}", value);
				}
			}
			noticemsg.setContent(content);
			
		}
	}

	private String getUserValue(String value)
	{
		if (!StringUtils.startsWith(value, "SU"))
		{
			return value;
		}
		if (userMap.containsKey(value))
		{
			return userMap.get(value);
		}
		try
		{
			String userId = UserConversionUtil.transSysUidToUserId(value);
			if (StringUtils.isNotBlank(userId))
			{
				userMap.put(value, userId);
				return userId;
			}
		}
		catch (Exception e)
		{
			CodeCCUtils.errorLog(LOG, "getUserValue error!", e);
		}
		return value;
	}
}

		 
		 package com.huawei.dfx.noticemessageservice.service;
//----------import-code-block-mark-begin----------
import java.util.*;
import com.huawei.tools.commonlib.exception.ServiceException;
import com.huawei.dfx.noticemessageservice.model.NoticeMessage;
//----------import-code-block-mark-end----------

//----------class-code-block-mark-begin----------
public interface NoticeMessageService {

    String getServiceInfo(
	) throws ServiceException;

    String addNoticeMessage(
	NoticeMessage noticeMessage) throws ServiceException;

    List<String> addNoticeMessageBatch(
	List<NoticeMessage> noticeMessageList) throws ServiceException;

    Integer getNoticeMessageCount(
	NoticeMessage noticeMessage) throws ServiceException;

    List<NoticeMessage> getMessageListByMessage(
	NoticeMessage noticeMessage,
	Integer offset,
	Integer limit) throws ServiceException;

    String modifyNoticeMessage(
	NoticeMessage noticeMessage) throws ServiceException;

    Boolean modifyNoticeMessageBatch(
	List<NoticeMessage> noticeMessageList) throws ServiceException;

    Boolean modifyNoticeMessageByuser(
	NoticeMessage noticeMessage) throws ServiceException;

}
//----------class-code-block-mark-end----------




		 package com.huawei.dfx.noticemessageservice.service.impl;
//----------import-code-block-mark-begin----------
import java.util.*;
import org.springframework.web.method.annotation.MethodArgumentConversionNotSupportedException;
import org.springframework.web.bind.annotation.*;
import com.huawei.dfx.noticemessageservice.model.NoticeMessage;
import com.huawei.dfx.noticemessageservice.delegate.NoticeMessageServiceDelegate;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
import org.springframework.http.converter.HttpMessageNotReadableException;
import javax.validation.*;
import com.huawei.tools.commonlib.exception.ServiceException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.mvc.multiaction.NoSuchRequestHandlingMethodException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import javax.validation.constraints.*;
import org.springframework.web.HttpMediaTypeNotAcceptableException;
import com.huawei.dfx.noticemessageservice.service.NoticeMessageService;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.web.bind.MissingServletRequestParameterException;
//----------import-code-block-mark-end----------

//----------class-code-block-mark-begin----------
@RestController
public class NoticeMessageServiceController implements NoticeMessageService{

    @Autowired 
    private NoticeMessageServiceDelegate delegate;
    

		
    @Override
    public String getServiceInfo(
           ) 
    	throws ServiceException
    { 
		
    
		return delegate.getServiceInfo();
    }
    @Override
    public String addNoticeMessage(
           
    		@Valid @RequestBody NoticeMessage noticeMessage) 
    	throws ServiceException
    { 
		
    
		return delegate.addNoticeMessage(noticeMessage);
    }
    @Override
    public List<String> addNoticeMessageBatch(
           
    		@Valid @RequestBody List<NoticeMessage> noticeMessageList) 
    	throws ServiceException
    { 
		
    
		return delegate.addNoticeMessageBatch(noticeMessageList);
    }
    @Override
    public Integer getNoticeMessageCount(
           
    		@Valid @RequestBody NoticeMessage noticeMessage) 
    	throws ServiceException
    { 
		
    
		return delegate.getNoticeMessageCount(noticeMessage);
    }
    @Override
    public List<NoticeMessage> getMessageListByMessage(
           
    		@Valid @RequestBody NoticeMessage noticeMessage, 
    		
    		@NotNull() @RequestParam(value = "offset", required = true)Integer offset,
    		
    		@NotNull() @RequestParam(value = "limit", required = true)Integer limit) 
    	throws ServiceException
    { 
		
    
		return delegate.getMessageListByMessage(noticeMessage
			, offset
			, limit);
    }
    @Override
    public String modifyNoticeMessage(
           
    		@Valid @RequestBody NoticeMessage noticeMessage) 
    	throws ServiceException
    { 
		
    
		return delegate.modifyNoticeMessage(noticeMessage);
    }
    @Override
    public Boolean modifyNoticeMessageBatch(
           
    		@Valid @RequestBody List<NoticeMessage> noticeMessageList) 
    	throws ServiceException
    { 
		
    
		return delegate.modifyNoticeMessageBatch(noticeMessageList);
    }
    @Override
    public Boolean modifyNoticeMessageByuser(
           
    		@Valid @RequestBody NoticeMessage noticeMessage) 
    	throws ServiceException
    { 
		
    
		return delegate.modifyNoticeMessageByuser(noticeMessage);
    }
    @ResponseBody
    @ExceptionHandler(HttpMessageNotReadableException.class)  
	public Map<String,Object> httpMessageNotReadableExceptionHandler(
		HttpMessageNotReadableException runtimeException) {  
	         
	  Map<String, Object> model = new HashMap<String, Object>();  
	  model.put("status", "error"); 
	  model.put("errorMsg", "Request Parameter format is not correct");
	  return model;  
	 }  
    
    @ResponseBody
    @ExceptionHandler(HttpMessageNotWritableException.class)  
    public Map<String,Object> httpMessageNotWritableExceptionHandler(
    	HttpMessageNotWritableException runtimeException) {  
    	
    	Map<String, Object> model = new HashMap<String, Object>();  
    	model.put("status", "error"); 
    	model.put("errorMsg", "Internal Server Error");
    	return model;  
    }  
    
    @ResponseBody
    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)  
    public Map<String,Object> httpRequestMethodNotSupportedExceptionHandler(
    	HttpRequestMethodNotSupportedException runtimeException) {  
    	
    	Map<String, Object> model = new HashMap<String, Object>();  
    	model.put("status", "error"); 
    	model.put("errorMsg", "Reuqest Method is not support!");
    	return model;  
    }  
    
    @ResponseBody
    @ExceptionHandler(NoSuchRequestHandlingMethodException.class)  
    public Map<String,Object> noSuchRequestHandlingMethodExceptionHandler(
    	NoSuchRequestHandlingMethodException  runtimeException) {  
    	
    	Map<String, Object> model = new HashMap<String, Object>();  
    	model.put("status", "error"); 
    	model.put("errorMsg", "No such Request!");
    	return model;  
    }  
    
    @ResponseBody
    @ExceptionHandler(MissingServletRequestParameterException.class)  
    public Map<String,Object> missingServletRequestParameterExceptionHandler(
    	MissingServletRequestParameterException  runtimeException) {  
    	
    	Map<String, Object> model = new HashMap<String, Object>();  
    	model.put("status", "error"); 
    	model.put("errorMsg", "Miss Servlet Request Parmater!");
    	return model;  
    }
    
    @ResponseBody
    @ExceptionHandler(HttpMediaTypeNotAcceptableException.class)  
    public Map<String,Object> httpMediaTypeNotAcceptableExceptionHandler(
    	HttpMediaTypeNotAcceptableException  runtimeException) {  
    	
    	Map<String, Object> model = new HashMap<String, Object>();  
    	model.put("status", "error"); 
    	model.put("errorMsg", "HttpMediaType Not Acceptable!");
    	return model;  
    }
    
     @ResponseBody
	@ExceptionHandler(MethodArgumentTypeMismatchException.class)
	public Map<String, Object> methodArgumentTypeMismatchExceptionHandler(
			MethodArgumentTypeMismatchException runtimeException) {

		Map<String, Object> model = new HashMap<String, Object>();
		model.put("status", "error");
		model.put("errorMsg",
				"Method Argument Type Mismatch Exception!");
		return model;
	}
    
    @ResponseBody
    @ExceptionHandler(MethodArgumentConversionNotSupportedException.class)
    public Map<String, Object> methodArgumentConversionNotSupportedExceptionHandler(
    		MethodArgumentConversionNotSupportedException runtimeException) {
    	
    	Map<String, Object> model = new HashMap<String, Object>();
    	model.put("status", "error");
    	model.put("errorMsg",
    			"Method Argument Conversion Not Supported Exception!");
    	return model;
    }
    
    @ResponseBody
    @ExceptionHandler(IllegalArgumentException.class)  
    public Map<String,Object> illegalArgumentExceptionHandler(
    	IllegalArgumentException  runtimeException) {  
    	
    	Map<String, Object> model = new HashMap<String, Object>();  
    	model.put("status", "error"); 
    	model.put("errorMsg", "Illegal Argument Exception!");
    	return model;  
    }

}
//----------class-code-block-mark-end----------




















